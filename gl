#! /usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright (c) 1014, Nicolas P. Rougier. All rights reserved.
# Distributed under the terms of the new BSD License.
# -----------------------------------------------------------------------------
import sys
import ctypes
import numpy as np
import OpenGL.GL as gl
import OpenGL.GLUT as glut
import math
import transforms
import time
import fbo
import random
import geometry.simple
#import geometry.video
import geometry.ws2811
import geometry.plasma
import geometry.fire

import assembly.copperbar
import assembly.circles
import assembly.snow
import assembly.sint
import assembly.matrix
import assembly.particles

preview = True
raw = False

start = time.time()
lastTime = 0

ps = []

def render():
    global start, lastTime, circle, vid, ps
    
    t = time.time() - start

    if int(lastTime/2) < int(t/2):
		particles = assembly.particles.particles((random.uniform(-1, 1), .1), t)
		particles.setProjection(M)
		ps.append(particles)
#        circles.addCircle()
#        snow.addFlake()

		print len(ps)
		if len(ps) >= 3:
			ps = ps[1:]

    if int(lastTime*4) < int(t*4):
        matrix.addbar(t)

	lastTime = t

    gl.glClearColor(0, 0, 0, 0)    
    gl.glClear(gl.GL_COLOR_BUFFER_BIT)
    gl.glEnable(gl.GL_BLEND)
    gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE)

#    model = np.eye(4, dtype=np.float32)
#    transforms.translate(model, math.sin(0.5*t*math.pi*2) * 5, 0, 0)

#    projection = np.eye(4, dtype=np.float32)
#    transforms.scale(projection, .2, 1, 1)

#    circle.setModelView(model)
#    circle.setProjection(projection)
#    circle.render()
    
#    vid.render(t)
    
#    plasma.render()
#    fire.render()

#    copperbar.render(t)
#    circles.render(t)

#    sint.render(t)

#    snow.render(t)
#    snow.step(t)
	
#    matrix.render(t)
    for particles in ps:
        particles.render(t)
    
def display():
    global mainfbo
    global texquad
    
    if raw:
        render()
    else:
        with mainfbo:
            render()

        gl.glClearColor(0, 0, 0, 0)
        gl.glClear(gl.GL_COLOR_BUFFER_BIT)
        
        if preview:   
            texquad.render()
        else:
            signalgenerator.render()
                
    glut.glutSwapBuffers()
    glut.glutPostRedisplay()
    
def reshape(width,height):
    gl.glViewport(0, 0, width, height)

def keyboard( key, x, y ):
    if key == '\033':
        sys.exit( )


# GLUT init
# --------------------------------------
glut.glutInit()
glut.glutInitDisplayMode(glut.GLUT_DOUBLE | glut.GLUT_RGBA)
glut.glutCreateWindow('Amazing ws2811 VGA renderer')
if preview or raw:
    glut.glutReshapeWindow(1500,300)
else:
    glut.glutReshapeWindow(840,1000)
glut.glutReshapeFunc(reshape)
glut.glutDisplayFunc(display)
glut.glutKeyboardFunc(keyboard)

circle = geometry.simple.circle()
#vid = geometry.video.video('masagin.mp4')
plasma = geometry.plasma.plasma()
#fire = geometry.fire.fire()

M = np.eye(4, dtype=np.float32)

transforms.scale(M, 1, 5, 1)
#transforms.translate(M, 0, -1, 0)
#vid.setModelView(M)

mainfbo = fbo.FBO(512, 128)
texquad = geometry.simple.texquad()
texquad.setTexture(mainfbo.getTexture())

copperbar = assembly.copperbar.copperbar()
copperbar.setProjection(M)

circles = assembly.circles.circles()
circles.setProjection(M)

snow = assembly.snow.snow()
snow.setProjection(M)

sint = assembly.sint.sint()
sint.setProjection(M)

matrix = assembly.matrix.matrix()
matrix.setProjection(M)

#particles = assembly.particles.particles()
#particles.setProjection(M)

signalgenerator = geometry.ws2811.signalgenerator()
signalgenerator.setTexture(mainfbo.getTexture())

# Enter mainloop
# --------------------------------------
if not raw and not preview:
    glut.glutFullScreen()
glut.glutMainLoop()
